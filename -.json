{
  "createdAt": "2025-06-06T00:27:59.511Z",
  "updatedAt": "2025-06-08T18:28:43.866Z",
  "id": "nFynNmq0XTy5yiyD",
  "name": "My workflow Rail",
  "active": false,
  "isArchived": true,
  "nodes": [
    {
      "parameters": {
        "formTitle": "Submit PDF",
        "formDescription": "Submit pdf file",
        "formFields": {
          "values": [
            {
              "fieldLabel": "data",
              "fieldType": "file"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.2,
      "position": [
        -3240,
        -280
      ],
      "id": "a0dac88e-e9fb-45fd-9c62-fe3e8b694f28",
      "name": "On form submission",
      "webhookId": "f766ed71-52de-4747-bf1e-2020cbe40928"
    },
    {
      "parameters": {
        "operation": "pdf",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -2980,
        -195
      ],
      "id": "7aeed6c3-275e-4d68-b974-1aa8a5c5eb00",
      "name": "Extract from File",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first();\nconst fullText = input.json.text || '';\nconst binaryData = input.binary || {};\n\n// Find the binary property key (usually 'data')\nconst binaryKey = Object.keys(binaryData)[0];\n\n// Only proceed if binaryKey exists\nif (binaryKey && binaryData[binaryKey]) {\n  // Figure out the file name\n  const fileName =\n    input.json.fileName ||\n    input.json.originalFileName ||\n    'document.pdf';\n\n  // Attach the file name to the binary property\n  binaryData[binaryKey].fileName = fileName;\n}\n\n// Process text length\nlet processedText;\nif (fullText.length <= 8000) {\n  processedText = fullText;\n} else {\n  const start = fullText.substring(0, 4000);\n  const end = fullText.substring(fullText.length - 2000);\n  const middle = fullText.substring(\n    Math.floor(fullText.length / 2) - 1000,\n    Math.floor(fullText.length / 2) + 1000\n  );\n  processedText =\n    start +\n    \"\\n\\n[... document continues ...]\\n\\n\" +\n    middle +\n    \"\\n\\n[... document continues ...]\\n\\n\" +\n    end;\n}\n\n// Now processedText is defined and can be used in the return\nreturn [\n  {\n    json: {\n      text: processedText,\n      needsCoverExtraction: true,\n      originalFileName: (binaryKey && binaryData[binaryKey] && binaryData[binaryKey].fileName) || 'document.pdf'\n    },\n    binary: binaryData\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2540,
        -270
      ],
      "id": "73795686-02ba-4abc-8bff-321d11806730",
      "name": "Text Processing & Setup"
    },
    {
      "parameters": {
        "url": "={{ $json.urls[0] }}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "file",
              "outputPropertyName": "coverImage"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1660,
        -270
      ],
      "id": "1e5564d4-e07e-4332-bf5a-69e0cd0608cb",
      "name": "Download Cover Image"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Here is the PDF content: {{ $json.text }}\n\nPlease analyze this document and return **exactly** the following, with no extra commentary:\n\nTITLE: [Document title]\n\nYEAR: [Publication year]\n\nAUTHOR: [Author name(s)]\n\nPAGES: [Total page count]\n\nOVERVIEW (50 words):  \n[Write a 50-word overview of the document.]\n\nSUMMARY (300 words):  \n[Write a 300-word summary targeting \"White paper\" and the document title.]\n\nMETA DESCRIPTION (160 chars max):  \n[Write a meta description, no more than 160 characters.]\nDescribe your new note here.\n\nReview 1 (50 - 100 words):\n[Write a 150-word posotive review of the document.]",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2,
      "position": [
        -1220,
        -520
      ],
      "id": "73cbccc1-9c3f-496b-b6e8-3265b4fa6b8b",
      "name": "AI Agent",
      "alwaysOutputData": true
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first();\nlet text = input.json.output || '';\n\n// Extract title from the AI output\nconst titleMatch = text.match(/TITLE: (.+)/);\nconst aiTitle = titleMatch ? titleMatch[1].trim() : 'Untitled';\n\n// Split text into chunks that fit Notion's 2000 char limit\nconst chunks = [];\nlet remainingText = text;\n\nwhile (remainingText.length > 0) {\n  let chunk = remainingText.substring(0, 1900);\n\n  // If there's more text, try to break at a natural point\n  if (remainingText.length > 1900) {\n    const lastPeriod = chunk.lastIndexOf('. ');\n    const lastNewline = chunk.lastIndexOf('\\n');\n\n    if (lastPeriod > 1200) {\n      chunk = chunk.substring(0, lastPeriod + 1);\n    } else if (lastNewline > 1200) {\n      chunk = chunk.substring(0, lastNewline);\n    }\n  }\n\n  chunks.push(chunk.trim());\n  remainingText = remainingText.substring(chunk.length).trim();\n}\n\n// Return all original data plus split blocks, extracted title, and coverImageFileName\nreturn [{\n  json: {\n    ...input.json,\n    aiTitle: aiTitle,\n    block1: chunks[0] || '',\n    block2: chunks[1] || '',\n    block3: chunks[2] || '',\n    coverImageFileName: input.json.coverImageFileName // <-- Make sure this line is here!\n  },\n  binary: input.binary || {}\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -844,
        -420
      ],
      "id": "1d1e317c-d4ec-4514-a09d-a7e2fc628e08",
      "name": "Process AI Output"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "claude-opus-4-20250514",
          "mode": "list",
          "cachedResultName": "Claude Opus 4"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
      "typeVersion": 1.3,
      "position": [
        -1132,
        -300
      ],
      "id": "fc9f1604-5f71-4a17-bf3e-0851c8038584",
      "name": "Anthropic Chat Model",
      "credentials": {
        "anthropicApi": {
          "id": "l8nsyOPKZPhdPs1R",
          "name": "Anthropic account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.pdf.co/v1/file/upload/base64",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpBearerAuth",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "=bright@zumbador.com_YOhLhWaPTC9iNLyMEqLxj36vozhJA8LUQy5a0QXlKjBhdZdDEA95w61lILhWIWsl"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{$json}}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -2100,
        -270
      ],
      "id": "13f26ca1-36f9-48db-8f8f-c9f8bd290286",
      "name": "Upload PDF to PDF.co1",
      "credentials": {
        "httpBearerAuth": {
          "id": "K1q8u1aqz0KKzpwN",
          "name": "Bearer Auth account"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.pdf.co/v1/pdf/convert/to/png",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "x-api-key",
              "value": "bright@zumbador.com_YOhLhWaPTC9iNLyMEqLxj36vozhJA8LUQy5a0QXlKjBhdZdDEA95w61lILhWIWsl"
            },
            {
              "name": "Content-Type",
              "value": "application/json"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"url\": \"{{ $json.url }}\",\n  \"pages\": \"\",\n  \"inline\": true,\n  \"async\": false\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -1880,
        -270
      ],
      "id": "66e4e3bd-fee7-4c1b-9079-44b73821b94d",
      "name": "PDF to PNG conversion"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -2760,
        -270
      ],
      "id": "a9356590-3f58-474f-9bec-c37dc1376da7",
      "name": "Merge"
    },
    {
      "parameters": {
        "jsCode": "const binaryData = $input.first().binary.data;\nconst fileName = binaryData.fileName || 'document.pdf';\nconst buffer = await this.helpers.getBinaryDataBuffer(0, 'data');\nconst fileBase64 = buffer.toString('base64');\nreturn [{\n  json: {\n    file: `data:application/pdf;base64,${fileBase64}`,\n    name: fileName\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2320,
        -270
      ],
      "id": "f7b21363-49d3-4cbf-b16f-bfe1edc93367",
      "name": "Code"
    },
    {
      "parameters": {
        "operation": "upload",
        "bucketName": "xaraban",
        "fileName": "=ban/pdf_summary/{{ $json.coverImageFileName }}",
        "binaryPropertyName": "coverImage",
        "additionalFields": {}
      },
      "type": "n8n-nodes-base.awsS3",
      "typeVersion": 2,
      "position": [
        -1142,
        -120
      ],
      "id": "67cee06a-0e5f-49d2-95c1-fca1fcc7f0e3",
      "name": "AWS S3",
      "credentials": {
        "aws": {
          "id": "1EzY6RGV9x9KCtu0",
          "name": "AWS account"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "combineBy": "combineByPosition",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -624,
        -270
      ],
      "id": "09294a71-2720-4961-aeeb-878e6a832a60",
      "name": "Merge1"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first();\n\n// Try to get the existing fileName, or generate a unique one\nlet fileName = 'default.png';\n\nif (input.binary && input.binary.coverImage) {\n  if (input.binary.coverImage.fileName) {\n    // Use existing fileName if available\n    fileName = input.binary.coverImage.fileName;\n  } else {\n    // Generate a unique filename using timestamp\n    const timestamp = Date.now();\n    const randomSuffix = Math.random().toString(36).substring(2, 8);\n    fileName = `cover_${timestamp}_${randomSuffix}.png`;\n  }\n}\n\nreturn [{\n  json: {\n    ...input.json,\n    coverImageFileName: fileName\n  },\n  binary: input.binary\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1440,
        -120
      ],
      "id": "f2f6dee8-4626-4d33-9341-55e3a41a88e4",
      "name": "Add File name to JSON"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first();\n\n// Get the filename from coverImageFileName or generate a timestamp-based one\nconst fileName = input.json.coverImageFileName || `cover_${Date.now()}.png`;\nconst fullPath = `ban/pdf_summary/${fileName}`;\n\nreturn [{\n  json: {\n    ...input.json,\n    s3Url: `https://xaraban.s3.amazonaws.com/${fullPath}`\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -844,
        -120
      ],
      "id": "00f89074-471a-4e1a-8c96-4443f51ba741",
      "name": "Add s3Url to JSON"
    },
    {
      "parameters": {
        "pageId": {
          "__rl": true,
          "value": "https://www.notion.so/PDF-Summary-2007112e57b980d8b998e19f93512ba1",
          "mode": "url"
        },
        "title": "={{ $json.aiTitle }}",
        "blockUi": {
          "blockValues": [
            {
              "textContent": "={{ $json.block1 }}"
            },
            {
              "textContent": "={{ $json.block2 }}"
            },
            {
              "textContent": "={{ $json.block3 }}"
            },
            {
              "textContent": "={{ $json.s3Url }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.notion",
      "typeVersion": 2.2,
      "position": [
        -404,
        -270
      ],
      "id": "6cc851d9-8956-44ac-8a9f-70ff5e7f15cd",
      "name": "Notion_good_urlonly",
      "credentials": {
        "notionApi": {
          "id": "wv5ZmtxyRwkU0dXZ",
          "name": "Notion account"
        }
      }
    },
    {
      "parameters": {},
      "id": "6328576f-80af-4cdd-9ba6-134f6f3a65eb",
      "name": "When clicking \"Test workflow\"",
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2380,
        140
      ]
    },
    {
      "parameters": {
        "method": "POST",
        "url": "http://10.10.200.46:8081/api/v1/convert/pdf/img",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Content-Type",
              "value": "multipart/form-data"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "imageFormat",
              "value": "png"
            },
            {
              "parameterType": "formBinaryData",
              "name": "fileInput",
              "inputDataFieldName": "data"
            },
            {
              "name": "singleOrMultiple",
              "value": "muliple"
            },
            {
              "name": "colorType",
              "value": "color"
            },
            {
              "name": "dpi",
              "value": "72"
            }
          ]
        },
        "options": {}
      },
      "id": "8b648082-9a29-4d01-8d64-a0d92af579d7",
      "name": "HTTP Request | convert to IMG",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -1940,
        140
      ]
    },
    {
      "parameters": {
        "url": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
        "options": {}
      },
      "id": "5cf0e9af-13d4-42dd-a1dd-6e305bbc20fa",
      "name": "HTTP Request | download dummy PDF",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -2160,
        140
      ]
    },
    {
      "parameters": {
        "content": "## Sterling-PDF",
        "height": 320,
        "width": 800
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2480,
        60
      ],
      "id": "f849271c-b2ad-46d9-8856-61ffa4d3524c",
      "name": "Sticky Note",
      "disabled": true
    }
  ],
  "connections": {
    "On form submission": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          },
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Text Processing & Setup": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Download Cover Image": {
      "main": [
        [
          {
            "node": "Add File name to JSON",
            "type": "main",
            "index": 0
          },
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Process AI Output",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process AI Output": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Anthropic Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Upload PDF to PDF.co1": {
      "main": [
        [
          {
            "node": "PDF to PNG conversion",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDF to PNG conversion": {
      "main": [
        [
          {
            "node": "Download Cover Image",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Text Processing & Setup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Upload PDF to PDF.co1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AWS S3": {
      "main": [
        [
          {
            "node": "Add s3Url to JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge1": {
      "main": [
        [
          {
            "node": "Notion_good_urlonly",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add File name to JSON": {
      "main": [
        [
          {
            "node": "AWS S3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Add s3Url to JSON": {
      "main": [
        [
          {
            "node": "Merge1",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "When clicking \"Test workflow\"": {
      "main": [
        [
          {
            "node": "HTTP Request | download dummy PDF",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request | download dummy PDF": {
      "main": [
        [
          {
            "node": "HTTP Request | convert to IMG",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request | convert to IMG": {
      "main": [
        []
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "pinData": {},
  "versionId": "32808fce-b517-4692-a979-0431faae04a9",
  "triggerCount": 0,
  "tags": []
}