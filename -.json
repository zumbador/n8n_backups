{
  "createdAt": "2025-06-12T19:02:14.998Z",
  "updatedAt": "2025-06-12T19:02:14.998Z",
  "id": "2BBdWOivGiy7fDIh",
  "name": "Static PDFs Into Conversational AI Bots",
  "active": false,
  "isArchived": false,
  "nodes": [
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        1476,
        -20
      ],
      "id": "5da0f1ac-86cc-4303-9ee2-ab1d04e41147",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "respondWith": "allIncomingItems",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        816,
        440
      ],
      "id": "2e301d3c-0a0b-4270-8ce6-7917bab3e3c3",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/files",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "name": "purpose",
              "value": "ocr"
            },
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "pdf"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        -20
      ],
      "id": "a58468fd-52fe-4b92-83dd-d37f272dda8c",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "expiry",
              "value": "24"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        220,
        -20
      ],
      "id": "03771f6c-be75-4f90-a32d-5720f502aa89",
      "name": "HTTP Request1"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.mistral.ai/v1/ocr",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"type\": \"document_url\",\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"include_image_base64\": true\n}",
        "options": {
          "response": {
            "response": {
              "responseFormat": "json"
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        440,
        -20
      ],
      "id": "93b460e7-f4a7-412d-bb14-a554b2730db5",
      "name": "HTTP Request2"
    },
    {
      "parameters": {
        "jsCode": "const data = $input.first().json;\n\nconst pages = data.pages;\nconst pagesProcessed = data.usage_info?.pages_processed || 0;\n\nconst combinedMarkdown = pages\n  .map(page => page.markdown || '') // ensure safety on missing markdown\n  .join('\\n\\n'); // separate with double newlines\n\nreturn [{\n  json: {\n    combinedMarkdown,\n    pagesProcessed\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        660,
        -20
      ],
      "id": "534d6eda-b9e8-4796-a40d-78e8d43f4faf",
      "name": "Code"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "receive-pdf",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -220,
        -20
      ],
      "id": "b0e84629-5510-4d17-b560-1d5d760de9a9",
      "name": "PDF RECIEVER",
      "webhookId": "a88a8171-43a6-4a0a-b351-669b761c4f80"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are an expert content analyst. Analyze the following complete markdown of a PDF. Read through all sections carefully, identify the core themes, key points, and important takeaways. Then, write a concise summary of the entire PDF in exactly 75 words. Focus on what the PDF is about, who itâ€™s for, what problems it addresses, and the main conclusions or insights. Avoid unnecessary jargon. Keep the summary informative and clear.\nPages Proccesd : {{ $json.pagesProcessed }}\nMarkdown Content Starts Below:\n{{ $json.combinedMarkdown }}\n\ngive the language in full form",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        880,
        -20
      ],
      "id": "4f9adb12-3bff-4315-86dd-2e190787fb18",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.0-flash-thinking-exp-1219",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        908,
        200
      ],
      "id": "668e578b-7f7d-4370-b300-1cd24a17a90c",
      "name": "Google Gemini Chat Model"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"summary\": {\n      \"type\": \"string\",\n      \"description\": \"A 150-word summary of the document content\"\n    },\n    \"totalPages\": {\n      \"type\": \"integer\",\n      \"description\": \"The total number of pages processed in the document\"\n    },\n    \"totalWords\": {\n      \"type\": \"integer\",\n      \"description\": \"Total number of words in the document\"\n    },\n    \"language\": {\n      \"type\": \"string\",\n      \"description\": \"Language in which the document content is written\"\n    }\n  },\n  \"required\": [\"summary\", \"totalPages\", \"totalWords\", \"language\"]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        1028,
        200
      ],
      "id": "df6ed568-fdb5-4f54-81d9-5d48dcf3894a",
      "name": "Structured Output Parser"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "message-receive",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -220,
        440
      ],
      "id": "ed8c9e19-afb3-490c-9995-6ba56843e269",
      "name": "Message Receiving webhook",
      "webhookId": "5221a79c-7222-4245-98ec-01d6b56d20c7"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a helpful assistant for answering user queries based on uploaded PDF documents.\n\n**User's Question:**\n\n{{ $items(\"Message Receiving webhook\").map(i => i.json.body.message).join(\", \") }}\n\n\n**PDF Content Analysis:**\n{{ $json.formatted_text }}\n\n**Processing Summary:**\n- Unique PDFs processed: {{ $json.unique_count }}\n- Duplicates removed: Any PDFs with identical names were automatically filtered out\n- Content source: All information below comes from the {{ $json.unique_count }} unique PDF document(s)\n\n**Instructions:**\n1. Analyze all provided PDF content thoroughly\n2. Answer the user's question using only the information from these PDFs\n3. If referencing specific information, mention which PDF it came from\n4. If the question cannot be fully answered from the available PDFs, clearly state what information is missing\n5. Provide a clear, structured response that directly addresses the user's query\n\n**Response Guidelines:**\n- Be accurate and factual\n- Use clear, professional language\n- Organize information logically\n- Cite specific PDF sources when relevant\n- Acknowledge any limitations in the available data\n\nBegin your analysis and response now.\n",
        "hasOutputParser": true,
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        440,
        440
      ],
      "id": "f5e2164b-72e1-411c-8aad-780a6f1f8a81",
      "name": "AI Agent1"
    },
    {
      "parameters": {
        "schemaType": "manual",
        "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"answer\": {\n      \"type\": \"string\",\n      \"description\": \"The assistant's reply to the user's question based on the PDF content\"\n    },\n    \"relevanceScore\": {\n      \"type\": \"number\",\n      \"description\": \"A score between 0 and 1 indicating how confident the assistant is in the answer\"\n    }\n  },\n  \"required\": [\"answer\", \"relevanceScore\"]\n}\n"
      },
      "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
      "typeVersion": 1.2,
      "position": [
        588,
        660
      ],
      "id": "6932d25d-ac49-47c6-a41a-78b035baa585",
      "name": "Structured Output Parser1"
    },
    {
      "parameters": {
        "modelName": "models/gemini-2.5-flash-preview-05-20",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [
        468,
        660
      ],
      "id": "4e911f73-9aa5-4204-8445-d52cd98cb717",
      "name": "Google Gemini Chat Model1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "12cb4e8f-0d26-4dd5-b8d0-69ed64e980dd",
              "name": "Summary",
              "value": "={{ $json.output.summary }}",
              "type": "string"
            },
            {
              "id": "9bae465b-33c7-4713-bfc9-7daf50e49ae7",
              "name": "totalPages",
              "value": "={{ $json.output.totalPages }}",
              "type": "number"
            },
            {
              "id": "2dc077df-5145-46da-97b2-886110bd6770",
              "name": "totalWords",
              "value": "={{ $json.output.totalWords }}",
              "type": "number"
            },
            {
              "id": "ef6bbccd-8882-4ca3-9d20-59d8f087f28a",
              "name": "language",
              "value": "={{ $json.output.language }}",
              "type": "string"
            },
            {
              "id": "9692167e-37dc-4c90-b048-73ab6933d1ac",
              "name": "ocr",
              "value": "={{ $('Code').item.json.combinedMarkdown }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1256,
        -20
      ],
      "id": "334f05be-073f-4da1-a37e-916db100b41c",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "getAll",
        "tableId": "PDF_DATA_INFO",
        "returnAll": true,
        "filterType": "string",
        "filterString": "=id=in.({{ $('Message Receiving webhook').item.json.body.pdfIds.join(',') }})"
      },
      "type": "n8n-nodes-base.supabase",
      "typeVersion": 1,
      "position": [
        0,
        440
      ],
      "id": "47dbad24-f345-4cb1-884a-515e5122fab0",
      "name": "Supabase"
    },
    {
      "parameters": {
        "jsCode": "// Get the input data\nconst inputData = $input.all();\n\n// Use Map to store unique items (key = PDF NAME, value = PDF SUMMARY)\nconst uniqueItems = new Map();\n\ninputData.forEach(item => {\n  const pdfName = item.json['PDF NAME'];\n  const ocrText = item.json['OCR OF PDF'];\n  \n  // Use PDF NAME as key to avoid duplicates\n  if (pdfName && !uniqueItems.has(pdfName)) {\n    uniqueItems.set(pdfName, ocrText);\n  }\n});\n\n// Create formatted text from unique items\nconst formattedSections = Array.from(uniqueItems.entries()).map(([name, ocr]) => \n  `name : ${name}\\nocr : ${ocr}`\n);\n\nconst finalText = formattedSections.join('\\n\\n---\\n\\n');\n\nreturn [{\n  json: {\n    formatted_text: finalText,\n    unique_count: uniqueItems.size\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        220,
        440
      ],
      "id": "765a5603-4c6c-4efe-a630-b10bece85075",
      "name": "Code1"
    }
  ],
  "connections": {
    "HTTP Request": {
      "main": [
        [
          {
            "node": "HTTP Request1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request1": {
      "main": [
        [
          {
            "node": "HTTP Request2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request2": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDF RECIEVER": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Message Receiving webhook": {
      "main": [
        [
          {
            "node": "Supabase",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Structured Output Parser1": {
      "ai_outputParser": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_outputParser",
            "index": 0
          }
        ]
      ]
    },
    "Google Gemini Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent1": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Supabase": {
      "main": [
        [
          {
            "node": "Code1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code1": {
      "main": [
        [
          {
            "node": "AI Agent1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {},
  "versionId": "f7940fe8-0c2b-466b-9a13-f1b330258d2a",
  "triggerCount": 0,
  "tags": []
}